#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include "Command.hpp"
#include "Unit.hpp"
#include "MoveUnitCommand.hpp"

////////////////////////////////////////////////////////////
/// \brief The Input System is used to handle and translate the users input into Commands
///
////////////////////////////////////////////////////////////

class InputSystem
{
public:

	////////////////////////////////////////////////////////////
	/// \brief Checks for user input and translate into command
	///
	/// This function will check user input, and return the appropriate Command
	///
	/// \return Command
	///
	////////////////////////////////////////////////////////////
	Command* handleInput(Unit *unit);

	////////////////////////////////////////////////////////////
	/// \brief Checks if a command has occured
	///
	/// This function will check if a command is awaiting to be processed
	///
	/// \return True if a command is waiting to be processed
	///
	////////////////////////////////////////////////////////////
	bool isPressed(sf::Keyboard::Key key);

private:

	////////////////////////////////////////////////////////////
	/// \brief Encapsulates the Up Button
	///
	/// By Encapsulating the button, you allow for Player KeyMapping
	///
	/// \return Command	
	////////////////////////////////////////////////////////////
	Command* m_buttonUp;

	////////////////////////////////////////////////////////////
	/// \brief Encapsulates the Down Button
	///
	/// By Encapsulating the button, you allow for Player KeyMapping
	///
	/// \return Command	
	////////////////////////////////////////////////////////////
	Command* m_buttonDown;

	////////////////////////////////////////////////////////////
	/// \brief Encapsulates the Left Button
	///
	/// By Encapsulating the button, you allow for Player KeyMapping
	///
	/// \return Command	
	////////////////////////////////////////////////////////////
	Command* m_buttonLeft;
	
	////////////////////////////////////////////////////////////
	/// \brief Encapsulates the Right Button
	///
	/// By Encapsulating the button, you allow for Player KeyMapping
	///
	/// \return Command	
	////////////////////////////////////////////////////////////
	Command* m_buttonRight;
};


////////////////////////////////////////////////////////////
/// \class InputSystem
/// \ingroup System
///
/// This class will handle the user input. It will load a config keymap to asign the keys to commands. 
/// This keymap will be editable by the User, with the option to revert to default. 
/// This class should be able to convert all user inputs, be it Keyboard, Mouse, Gamepad or AI Script into commands
///
////////////////////////////////////////////////////////////